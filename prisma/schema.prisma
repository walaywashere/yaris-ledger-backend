generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  STANDARD
}

model User {
  id             String          @id @default(uuid())
  username       String          @unique
  fullName       String
  passwordHash   String
  email          String?         @unique
  role           UserRole        @default(STANDARD)
  isActive       Boolean         @default(true)
  refreshTokens  RefreshToken[]
  salesCreated   SaleEntry[]     @relation("sales_created")
  salesUpdated   SaleEntry[]     @relation("sales_updated")
  pricingCreated CustomerPrice[] @relation("pricing_created")
  settingsEdited Setting[]       @relation("settings_updated")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Location {
  id           String     @id @default(uuid())
  name         String     @unique
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  customers    Customer[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Customer {
  id            String          @id @default(uuid())
  name          String
  code          String?         @unique
  locationId    String
  location      Location        @relation(fields: [locationId], references: [id], onDelete: Restrict)
  isActive      Boolean         @default(true)
  notes         String?
  sales         SaleEntry[]
  pricing       CustomerPrice[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([name])
  @@index([locationId, isActive])
}

model CustomerPrice {
  id            String    @id @default(uuid())
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  price         Decimal   @db.Decimal(10, 2)
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdById   String?
  createdBy     User?     @relation("pricing_created", fields: [createdById], references: [id], onDelete: SetNull)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([customerId, effectiveFrom])
  @@index([effectiveTo])
}

model SaleEntry {
  id            String    @id @default(uuid())
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Restrict)
  entryDate     DateTime
  containerQty  Int
  unitPrice     Decimal   @db.Decimal(10, 2)
  totalAmount   Decimal   @db.Decimal(12, 2)
  notes         String?
  createdById   String?
  createdBy     User?     @relation("sales_created", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById   String?
  updatedBy     User?     @relation("sales_updated", fields: [updatedById], references: [id], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([customerId, entryDate])
  @@index([entryDate])
  @@index([customerId, createdAt])
}

model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  updatedById String?
  updatedBy   User?    @relation("settings_updated", fields: [updatedById], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}